============ COMUNICAÇÃO ENTRE TABELAS COM MIGRATIONS ===================================================================

Não abordamos diretamente na capacitação, mas, como vocês viram na capacitação de Fundamentos, um banco de dados
relacional possui tabelas que se comunicam entre si com ajuda de chaves estrangeiras. Ao construir as migrations,
podmeos representar isso. Segue como ficaria a migrations de uma outra tabela que se ralaciona com a tabela 'usúario': 
 
--------------------------------------------

exports.up = function(knex) {
    return knex.schema.createTable('tarefa', (table) => {
        table.increments('id').primary();
        table.string('nome').notNullable();
        table.string('descricao');
        table.timestamp('prazo');
        table.integer('usuarioId').unsigned().references("id").inTable('usuario').onDelete('CASCADE');
    })
};


exports.down = function(knex) {
    return knex.schema.dropTable('tarefa');
};

--------------------------------------------

OBSERVAÇÕES: 

cascade -> se eu remover um usuário, todas as suas tarefas também serão apagadas
restrict -> só removo um usuário (tabela pai) se eu tiver removido todas as tarefas (filhas)
set null -> a remoção do usuário colocar NULL em userId das tarefas



============================================= HASH E TOKEN =================================================

A lógica de hash de senhas e autenticação por tokne pode não ser trivial de entender no primeiro contato.
Segue links caso sintam que precisam se aprofundar:

Tokem: https://www.totvs.com/blog/gestao-para-assinatura-de-documentos/jwt-token/#:~:text=O%20JWT%20(JSON%20Web%20Token,e%20segura%20entre%20as%20partes.
Hash: https://www.linkedin.com/pulse/um-pouco-sobre-hash-salt-allysson-antonucci-4h0nf/


================================================ LINKS =====================================================

MySQL/Workbench : https://www.mysql.com/products/workbench/

Knex: https://knexjs.org/guide/

Node e NPM: https://nodejs.org/pt/download/prebuilt-installer